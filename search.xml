<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SSM 三大框架整合 (Spring+SpringMVC+MyBatis) </title>
    <url>/2020/04/18/SSM%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88-Spring-SpringMVC-MyBatis/</url>
    <content><![CDATA[<p>最近几天自学了 SSM 框架，做了个<a href="https://github.com/cnyangkui/vote" target="_blank" rel="noopener">投票系统</a>来入门，在这里做一些学习笔记方便以后查阅……</p>
<a id="more"></a>
<h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h2><ul>
<li>数据库驱动包：mysql</li>
<li>日志jar包：log4j</li>
<li>mybatis及mybatis依赖jar包</li>
<li>mybatis和spring整合包</li>
<li>数据库连接池包：c3p0或者dbcp</li>
<li>spring的jar包</li>
<li>jstl包</li>
<li>servlet包</li>
</ul>
<h2 id="日志和数据库配置文件"><a href="#日志和数据库配置文件" class="headerlink" title="日志和数据库配置文件"></a>日志和数据库配置文件</h2><h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">debug,stdout,D,E</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 输出信息到控制台 ###</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 输出DEBUG 级别以上的日志到=logs/error.log ###</span></span><br><span class="line"><span class="meta">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.D.File</span> = <span class="string">logs/log.log</span></span><br><span class="line"><span class="meta">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.D.Threshold</span> = <span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 输出ERROR 级别以上的日志到=logs/error.log ###</span></span><br><span class="line"><span class="meta">log4j.appender.E</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.E.File</span> =<span class="string">logs/error.log</span></span><br><span class="line"><span class="meta">log4j.appender.E.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.E.Threshold</span> = <span class="string">ERROR</span></span><br><span class="line"><span class="meta">log4j.appender.E.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.E.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br></pre></td></tr></table></figure>
<h3 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/vote?serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<h2 id="MyBatis-逆向工程生成-po-和-mapper"><a href="#MyBatis-逆向工程生成-po-和-mapper" class="headerlink" title="MyBatis 逆向工程生成 po 和 mapper"></a>MyBatis 逆向工程生成 po 和 mapper</h2><h3 id="逆向工程配置文件"><a href="#逆向工程配置文件" class="headerlink" title="逆向工程配置文件"></a>逆向工程配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MySQL"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.ToStringPlugin"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Mysql数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/vote?serverTimezone=Asia/Shanghai"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--保证只生成自己指定的 database 中的 User 表,不生成UserWithBLOBs--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"nullCatalogMeansCurrent"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认为false，把JDBC DECIMAL 和NUMERIC类型解析为Integer，为true时</span></span><br><span class="line"><span class="comment">        把JDBC DECIMAL 和NUMERIC类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：生成POJO类的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.yk.vote.po"</span> <span class="attr">targetProject</span>=<span class="string">"src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否对model添加构造函数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：mapper映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.yk.vote.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：mapper接口生成的的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.yk.vote.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span> <span class="attr">mapperName</span>=<span class="string">"UserMapper"</span> &gt;</span></span><br><span class="line">            <span class="comment">&lt;!--驼峰命名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"voteInfo"</span> <span class="attr">domainObjectName</span>=<span class="string">"VoteInfo"</span> <span class="attr">mapperName</span>=<span class="string">"VoteInfoMapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"voteOption"</span> <span class="attr">domainObjectName</span>=<span class="string">"VoteOption"</span> <span class="attr">mapperName</span>=<span class="string">"VoteOptionMapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"userVote"</span> <span class="attr">domainObjectName</span>=<span class="string">"UserVote"</span> <span class="attr">mapperName</span>=<span class="string">"UserVoteMapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="po-和-mapper-生成"><a href="#po-和-mapper-生成" class="headerlink" title="po 和 mapper 生成"></a>po 和 mapper 生成</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yk.vote.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis逆向工程生成po和mapper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratorFromXML</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">        File configFile = <span class="keyword">new</span> File(<span class="string">"resources/mybatis/generator-config.xml"</span>);</span><br><span class="line">        ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">        DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Spring-SpringMVC-MyBatis-相关配置"><a href="#Spring-SpringMVC-MyBatis-相关配置" class="headerlink" title="Spring, SpringMVC, MyBatis 相关配置"></a>Spring, SpringMVC, MyBatis 相关配置</h2><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--批量扫描别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.yk.vote.po"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="spring-dao-xml"><a href="#spring-dao-xml" class="headerlink" title="spring-dao.xml"></a>spring-dao.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载db.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置sqlSessionFactory对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载mybatis的全局配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mapper扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.yk.vote.mapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="spring-service-xml"><a href="#spring-service-xml" class="headerlink" title="spring-service.xml"></a>spring-service.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id="userService" class="com.yk.vote.service.impl.UserServiceImpl"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;bean id="voteService" class="com.yk.vote.service.impl.VoteServiceImpl"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yk.vote.service.impl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="spring-transaction-xml"><a href="#spring-transaction-xml" class="headerlink" title="spring-transaction.xml"></a>spring-transaction.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.yk.vote.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yk.vote.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用mvc:annotation-driven不用再配置注解映射器和注解适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name="prefix" value="/WEB-INF/static/"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态资源映射，常用于加载html、js、css、图片、视频等静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当上面要访问的静态资源不存在与上面的配置中时，则根据此配置来访问--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tomcat启动的时候加载这个servlet 优先级，数字越小级别越高 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置字符编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>2017年深圳大学可视计算暑期学校 3ds Max 实践</title>
    <url>/2017/07/30/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6%E5%8F%AF%E8%A7%86%E8%AE%A1%E7%AE%97%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A13dsMax%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>今年这个时候，正在为保研推免的事情到处奔波，报名参加了深圳大学可视计算暑期学校。具体活动内容包括：由国内外著名学者和教授开设计算机图形学、计算机视觉以及可视化领域的前沿学术讲座；上实践课程，指导学生运用在广告、影视、游戏等各行业应用广泛的3ds Max软件完成简单模型的创建。</p>
<a id="more"></a>
<p>在这次四天的学习中，教授的全英文讲座听得我一脸懵逼，全靠PPT涨见识。在实践课中，倒是把3ds Max小小入门了下，后来莫名其妙成为了该期暑期学校的优秀学员，心虚 (ಡωಡ) </p>
<!-- <img src="/2017/07/30/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6%E5%8F%AF%E8%A7%86%E8%AE%A1%E7%AE%97%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A13dsMax%E5%AE%9E%E8%B7%B5/summer_school.png" class=""> -->
<p><img src="https://s2.ax1x.com/2020/02/20/3e51l8.png" alt="3e51l8.png"></p>
<h2 id="我的作品"><a href="#我的作品" class="headerlink" title="我的作品"></a>我的作品</h2><ol>
<li>主要使用简单立体模型的创建和移动、缩放、旋转等操作，最后进行灯光渲染。</li>
</ol>
<!-- <img src="/2017/07/30/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6%E5%8F%AF%E8%A7%86%E8%AE%A1%E7%AE%97%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A13dsMax%E5%AE%9E%E8%B7%B5/1.jpg" class=""> -->
<p><a href="https://imgchr.com/i/3e5KYt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/20/3e5KYt.md.jpg" alt="3e5KYt.md.jpg"></a></p>
<ol>
<li>主要使用样条线、多边形的编辑、挤出等操作。培养空间思维，掌握三视图的配合使用，能够更好地进行3D建模。</li>
</ol>
<!-- <img src="/2017/07/30/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6%E5%8F%AF%E8%A7%86%E8%AE%A1%E7%AE%97%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A13dsMax%E5%AE%9E%E8%B7%B5/2.jpg" class=""> -->
<p><a href="https://imgchr.com/i/3e536S" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/20/3e536S.md.jpg" alt="3e536S.md.jpg"></a></p>
<ol>
<li>通过车削操作，进行苹果、高脚杯、瓶子、罐子等简单模型的创建；贴图操作，能够将创建的模型贴上适合的皮肤图片。苹果的影子有个小洞（捂脸）</li>
</ol>
<!-- <img src="/2017/07/30/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6%E5%8F%AF%E8%A7%86%E8%AE%A1%E7%AE%97%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A13dsMax%E5%AE%9E%E8%B7%B5/3.jpg" class=""> -->
<p><a href="https://imgchr.com/i/3e5tTs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/20/3e5tTs.md.jpg" alt="3e5tTs.md.jpg"></a></p>
<ol>
<li>一个大杂烩，将前面讲到的操作基本都用上了。</li>
</ol>
<!-- <img src="/2017/07/30/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6%E5%8F%AF%E8%A7%86%E8%AE%A1%E7%AE%97%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A13dsMax%E5%AE%9E%E8%B7%B5/4.jpg" class=""> -->
<p><a href="https://imgchr.com/i/3e5lSf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/20/3e5lSf.md.jpg" alt="3e5lSf.md.jpg"></a></p>
<ol>
<li>这是树形结构的创意书架，主要使用了样条线的编辑和挤出操作等，加上灯光的渲染。</li>
</ol>
<!-- <img src="/2017/07/30/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6%E5%8F%AF%E8%A7%86%E8%AE%A1%E7%AE%97%E6%9A%91%E6%9C%9F%E5%AD%A6%E6%A0%A13dsMax%E5%AE%9E%E8%B7%B5/5.jpg" class=""> -->
<p><a href="https://imgchr.com/i/3e5MfP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/20/3e5MfP.md.jpg" alt="3e5MfP.md.jpg"></a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>3ds Max</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 基础知识-核心概念</title>
    <url>/2017/10/11/D3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p><a href="https://d3js.org/" target="_blank" rel="noopener">D3.js</a>是一个JavaScript的函数库，主要用来做数据可视化。</p>
<p>本节内容介绍了选择集、动态属性、enter、exit、update操作和过渡。选择集描述如何选中想要操作的节点；动态属性控制选中节点元素的属性；enter、exit、update分别来添加节点、移除节点、更新节点；过渡用来制作动画效果。</p>
<a id="more"></a>
<p>下载最新版本（4.11.0）在这里：</p>
<ul>
<li><a href="https://github.com/d3/d3/releases/download/v4.11.0/d3.zip" target="_blank" rel="noopener">d3.zip</a></li>
</ul>
<p>也可直接链接，拷贝下面片段：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>D3教程：<a href="https://github.com/d3/d3/wiki/Tutorials" target="_blank" rel="noopener">点击这里</a></p>
<h2 id="Selections"><a href="#Selections" class="headerlink" title="Selections"></a>Selections</h2><p>D3可以选择某一种标签的所有节点进行批量操作，也可以根据需要选择单独的节点进行操作。当使用JavaScrip对某一种标签节点操作时需要进行迭代操作，而使用D3可以批量操作，减少代码冗余。</p>
<p>选择所有节点进行操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">d3.selectAll(<span class="string">"p"</span>).style(<span class="string">"color"</span>, <span class="string">"white"</span>);</span><br></pre></td></tr></table></figure>
<p>选择单独节点进行操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">d3.select(<span class="string">"body"</span>).style(<span class="string">"background-color"</span>, <span class="string">"black"</span>);</span><br></pre></td></tr></table></figure>
<p>以上示例是按照标签名来选择节点元素（“p”和“body”），还可以按照attribute value、class、id等选择节点元素。与jQuery相似，使用<strong>#</strong>匹配<strong>id</strong>，<strong>.</strong>匹配<strong>class</strong>……</p>
<h2 id="Dynamic-Properties"><a href="#Dynamic-Properties" class="headerlink" title="Dynamic Properties"></a>Dynamic Properties</h2><p>样式、属性可以被指定为D3中数据的函数，而不仅仅是简单的常量。</p>
<p>例如，随机初始化段落的颜色：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">d3.selectAll(<span class="string">"p"</span>).style(<span class="string">"color"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hsl("</span> + <span class="built_in">Math</span>.random() * <span class="number">360</span> + <span class="string">",100%,50%)"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>根据奇偶设置段落的颜色：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">d3.selectAll(<span class="string">"p"</span>).style(<span class="string">"color"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i % <span class="number">2</span> ? <span class="string">"#fff"</span> : <span class="string">"#eee"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>数据可以动态绑定到节点元素中。数据被指定为一个数组，每个元素作为一个参数传递到函数中，默认情况下是按索引逐个元素进行传递，数组中的第一个元素被传递给第一个节点，第二个元素被传递给第二个节点，以此类推。</p>
<p>例如，将数字数组绑定到段落元素，段落字体大小按数组中这些数字来依次显示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">d3.selectAll(<span class="string">"p"</span>)</span><br><span class="line">  .data([<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>])</span><br><span class="line">  .style(<span class="string">"font-size"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d + <span class="string">"px"</span>; &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Enter-and-Exit"><a href="#Enter-and-Exit" class="headerlink" title="Enter and Exit"></a>Enter and Exit</h2><p>使用enter和exit函数，分别可以为传入的数据创建新的节点和去除多余的节点。</p>
<p>当数组绑定到节点时，数组中的元素逐个与选中的节点进行绑定。如果节点数量少于数组元素数量时，会创建新节点绑定多出的数据。如果节点数量多于数组元素数量时，会移除末尾多出的节点。enter之后一般使用append来进行节点元素的实际创建，exit之后一般使用remove来移除多出的节点。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">d3.select(<span class="string">"body"</span>)</span><br><span class="line">  .selectAll(<span class="string">"p"</span>)</span><br><span class="line">  .data([<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>])</span><br><span class="line">  .enter().append(<span class="string">"p"</span>)</span><br><span class="line">  .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> <span class="string">"I’m number "</span> + d + <span class="string">"!"</span>; &#125;);</span><br></pre></td></tr></table></figure>
<p>更新节点元素。不会创建新的节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Update...</span></span><br><span class="line"><span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>)</span><br><span class="line">  .selectAll(<span class="string">"p"</span>)</span><br><span class="line">  .data([<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>])</span><br><span class="line">  .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d; &#125;);</span><br></pre></td></tr></table></figure>
<p>创建新的节点。当节点数量小于数组元素数量时，创建新的节点，使节点数量与数据元素数量相等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Enter...</span></span><br><span class="line">p.enter().append(<span class="string">"p"</span>)</span><br><span class="line">	.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d; &#125;);</span><br></pre></td></tr></table></figure>
<p>删除多余节点。当节点数量大于数组元素数量时，移除末尾多余的节点，使节点数量与数据元素数量相等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Exit...</span></span><br><span class="line">p.exit().remove();</span><br></pre></td></tr></table></figure>
<h2 id="Transitions"><a href="#Transitions" class="headerlink" title="Transitions"></a>Transitions</h2><p>D3支持动画效果，这种动画效果可以通过对样式属性的过渡实现。其补间插值支持多种方式，比如线性、弹性等。</p>
<p>d3-transition详解：<a href="https://github.com/d3/d3-transition" target="_blank" rel="noopener">点击这里</a></p>
<p>这里介绍四个函数。</p>
<p><strong>transition()</strong><br>启动过渡效果。其前后是图形变化前后的状态（形状、位置、颜色等等）。</p>
<p><strong>duration()</strong><br>指定过渡的持续时间，单位为毫秒。</p>
<p><strong>ease()</strong><br>指定过渡的方式，常用的有：</p>
<ul>
<li>linear：普通的线性变化</li>
<li>circle：慢慢地到达变换的最终状态</li>
<li>elastic：带有弹跳的到达最终状态</li>
<li>bounce：在最终状态处弹跳几次</li>
</ul>
<p><strong>delay()</strong><br>指定延迟的时间，表示一定时间后才开始转变，单位同样为毫秒。此函数可以对整体指定延迟，也可以对个别指定延迟。</p>
<p>例，背景色过渡到黑色，1秒后开始过渡，过渡时长为1秒：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">d3.select(<span class="string">"body"</span>).transition()</span><br><span class="line">  .delay(<span class="number">1000</span>)</span><br><span class="line">  .duration(<span class="number">1000</span>)</span><br><span class="line">  .style(<span class="string">"background-color"</span>, <span class="string">"black"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>D3.js</tag>
      </tags>
  </entry>
  <entry>
    <title>D3 基础知识</title>
    <url>/2017/10/16/D3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862/</url>
    <content><![CDATA[<p>D3.js基础知识，介绍了添加元素、绑定数据、使用数据、矢量图SVG、比例尺Scale和坐标轴Axis。本篇案例都是使用D3.js v4版本。</p>
<a id="more"></a>
<p>D3官网：<a href="https://d3js.org/" target="_blank" rel="noopener">D3</a><br>参考教程：<a href="http://alignedleft.com/tutorials/d3/" target="_blank" rel="noopener">D3 Tutorials - Scott Murray</a></p>
<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">d3.select(<span class="string">"body"</span>).append(<span class="string">"p"</span>).text(<span class="string">"New paragraph!"</span>)</span><br></pre></td></tr></table></figure>
<p>在html中添加了一个p标签，p标签text值为“New paragraph!”。</p>
<h2 id="绑定数据"><a href="#绑定数据" class="headerlink" title="绑定数据"></a>绑定数据</h2><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>];</span><br><span class="line">d3.select(<span class="string">"body"</span>)</span><br><span class="line">	.selectAll(<span class="string">"p"</span>)</span><br><span class="line">	.data(dataset)</span><br><span class="line">	.enter()</span><br><span class="line">	.append(<span class="string">"p"</span>)</span><br><span class="line">	.text(<span class="string">"New paragraph!"</span>);</span><br></pre></td></tr></table></figure>
<p><code>d3.select(&quot;body&quot;)</code> —— 在DOM中找到body节点。<br><code>.selctAll(&quot;p&quot;)</code> —— 在上一步找到的body节点中选择所有的p标签节点。如果没有，返回空，但是这个空代表将要存在的段落。<br><code>.data(dataset)</code> —— 绑定数据到选择的DOM元素上。<br><code>.enter()</code> —— enter()将创建一个占位符元素，用来绑定数据。<br><code>.append(&quot;p&quot;)</code> —— 获取enter()创建的占位符，将p元素插入到DOM中。<br><code>.text(&quot;New paragraph!&quot;)</code> —— 为每个p元素插入文本值。</p>
<p>html中添加了5个p标签，text值均为“New paragraph!”。</p>
<h3 id="TSV"><a href="#TSV" class="headerlink" title="TSV"></a>TSV</h3><p>TSV是一种方便的表格数据格式。该表格可以从Microsoft Excel等表格程序导出，也可以在文本编辑器中手工编写。每一行代表一个表行，其中每行的数据由制表符Tab分隔组成。第一行是标题行，并指定列名。例如，我们的数据文件data.tsv内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name	value</span><br><span class="line">Locke	4</span><br><span class="line">Reyes	8</span><br><span class="line">Ford	15</span><br><span class="line">Jarrah	16</span><br><span class="line">Jone	23</span><br><span class="line">Kwon	42</span><br></pre></td></tr></table></figure>
<p>要在浏览器中使用此数据，需要从服务器下载文件，然后解析文件，将文件的文本转换为可用的JavaScript对象。这件事情可以由函数d3.tsv实现。<br>下载是异步的。当调用d3.tsv时，文件在后台下载然后返回数据。在下载完成后的某个时候，回调函数将使用新数据调用，如果下载失败，则返回错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 这里的代码首先运行，处于文件下载前。</span></span><br><span class="line">d3.tsv(<span class="string">"data.tsv"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//3. 这里的代码最后运行，此时文件下载完成。</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2. 这里的代码第二时间运行，文件正在下载中。</span></span><br></pre></td></tr></table></figure>
<p>TSV文件的文本转换为JavaScript对象是这个样子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [</span><br><span class="line">	&#123;<span class="attr">name</span>: <span class="string">"Locke"</span>, <span class="attr">value</span>: <span class="number">4</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">name</span>: <span class="string">"Reyes"</span>, <span class="attr">value</span>: <span class="number">8</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">name</span>: <span class="string">"Ford"</span>, <span class="attr">value</span>:<span class="number">15</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">name</span>: <span class="string">"Jarrah"</span>, <span class="attr">value</span>: <span class="number">16</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">name</span>: <span class="string">"Jone"</span>, <span class="attr">value</span>: <span class="number">23</span>&#125;,</span><br><span class="line">	&#123;<span class="attr">name</span>: <span class="string">"Kwon"</span>, <span class="attr">value</span>: <span class="number">42</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>使用<code>d3.json</code>、<code>d3.csv</code>能够分别从json文件、csv文件绑定数据，用法相同。</p>
<h2 id="使用数据"><a href="#使用数据" class="headerlink" title="使用数据"></a>使用数据</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataset = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>];</span><br><span class="line">d3.select(<span class="string">"body"</span>)</span><br><span class="line">	.selectAll(<span class="string">"p"</span>)</span><br><span class="line">	.data(dataset)</span><br><span class="line">	.enter()</span><br><span class="line">	.append(<span class="string">"p"</span>)</span><br><span class="line">	.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123; <span class="keyword">return</span> d; &#125;);</span><br></pre></td></tr></table></figure>
<p>创建了5个p标签，text值分别为5，10，15，20，25。</p>
<h2 id="绘制div"><a href="#绘制div" class="headerlink" title="绘制div"></a>绘制div</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">div</span><span class="selector-class">.bar</span> &#123;</span></span><br><span class="line">		display: inline-block;</span><br><span class="line">		width: 20px;</span><br><span class="line"><span class="css">		<span class="selector-tag">height</span>: 75<span class="selector-tag">px</span>;   <span class="comment">/* We'll override this later */</span></span></span><br><span class="line">		background-color: teal;</span><br><span class="line">		margin-left: 2px;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://d3js.org/d3.v4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">var</span> dataset = [];                        <span class="comment">//Initialize empty array</span></span></span><br><span class="line"><span class="actionscript">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;           <span class="comment">//Loop 25 times</span></span></span><br><span class="line"><span class="javascript">	    <span class="keyword">var</span> newNumber = <span class="built_in">Math</span>.random() * <span class="number">30</span>;  <span class="comment">//New random number (0-30)</span></span></span><br><span class="line"><span class="actionscript">	    dataset.push(newNumber);             <span class="comment">//Add new number to array</span></span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="actionscript">	d3.select(<span class="string">"#example"</span>).selectAll(<span class="string">"div"</span>)</span></span><br><span class="line">	    .data(dataset)</span><br><span class="line">	    .enter()</span><br><span class="line"><span class="actionscript">	    .append(<span class="string">"div"</span>)</span></span><br><span class="line"><span class="actionscript">	    .attr(<span class="string">"class"</span>, <span class="string">"bar"</span>)</span></span><br><span class="line"><span class="actionscript">	    .style(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">	        <span class="keyword">var</span> barHeight = d * <span class="number">5</span>;</span></span><br><span class="line"><span class="actionscript">	        <span class="keyword">return</span> barHeight + <span class="string">"px"</span>;</span></span><br><span class="line">	    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图如下：</p>

<!DOCTYPE html>
<html>
<head>
<title></title>
<style type="text/css">
	div.bar {
		display: inline-block;
		width: 20px;
		height: 75px;   /* We'll override this later */
		background-color: teal;
		margin-left: 2px;
	}
</style>
<meta name="generator" content="Hexo 4.2.1"></head>
<body>
	<div id="example"></div>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script type="text/javascript">
	var dataset = [];                        //Initialize empty array
	for (var i = 0; i < 25; i++) {           //Loop 25 times
	    var newNumber = Math.random() * 30;  //New random number (0-30)
	    dataset.push(newNumber);             //Add new number to array
	}
	d3.select("#example").selectAll("div")
	    .data(dataset)
	    .enter()
	    .append("div")
	    .attr("class", "bar")
	    .style("height", function(d) {
	        var barHeight = d * 5;
	        return barHeight + "px";
	    });
</script>
</body>
<html>

<h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><p>在绘制任何东西之前，必须先创建一个SVG元素，并将该SVG元素作为绘制视觉效果的画布。最好指定SVG的宽度和高度。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"50"</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>常用的svg标签有<code>rect</code>、<code>circle</code>、<code>ellipse</code>、<code>line</code>、<code>text</code>、<code>path</code>。</p>
<h3 id="rect"><a href="#rect" class="headerlink" title="rect"></a>rect</h3><p>rect绘制一个矩形。使用x和y指定左上角的坐标，width和height分别指定矩形的宽度和高度。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"50"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>

<svg width="500" height="50"><rect x="0" y="0" width="500" height="50" /></svg>

<h3 id="circle"><a href="#circle" class="headerlink" title="circle"></a>circle</h3><p>circle绘制一个圆。使用cx和cy指定圆心的坐标，r指定半径。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"250"</span> <span class="attr">cy</span>=<span class="string">"25"</span> <span class="attr">r</span>=<span class="string">"25"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>

<svg width="500" height="50"><circle cx="250" cy="25" r="25" /></svg>

<h3 id="ellipse"><a href="#ellipse" class="headerlink" title="ellipse"></a>ellipse</h3><p>ellipse绘制一个椭圆。与圆类似，使用cx和cy指定中心的坐标，但是对于每个轴需要单独的半径值。rx为横轴方向的半径，ry为纵轴方向的半径。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">"250"</span> <span class="attr">cy</span>=<span class="string">"25"</span> <span class="attr">rx</span>=<span class="string">"100"</span> <span class="attr">ry</span>=<span class="string">"25"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>

<svg width="500" height="50"><ellipse cx="250" cy="25" rx="100" ry="25" /></svg>

<h3 id="line"><a href="#line" class="headerlink" title="line"></a>line</h3><p>line绘制一条线条。使用x1和y1来指定线一端的坐标，x2和y2指定另一端的坐标。必须指定线条的颜色使线条可见。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"500"</span> <span class="attr">y2</span>=<span class="string">"50"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>

<svg width="500" height="50"><line x1="0" y1="0" x2="500" y2="50" stroke="black" /></svg>

<h3 id="text"><a href="#text" class="headerlink" title="text"></a>text</h3><p>text呈现文字。使用x指定左边缘的位置，y指定基线的垂直位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"250"</span> <span class="attr">y</span>=<span class="string">"25"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>

<svg width="500" height="50"><text x="250" y="25">Hello World</text></svg>

<p>text继承父元素CSS指定的字体样式。我们也可以覆盖格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"250"</span> <span class="attr">y</span>=<span class="string">"25"</span> <span class="attr">font-family</span>=<span class="string">"sans-serif"</span> <span class="attr">font-size</span>=<span class="string">"25"</span> <span class="attr">fill</span>=<span class="string">"steelblue"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果图：</p>

<svg width="500" height="50">
	<text x="250" y="25" font-family="sans-serif" font-size="25" fill="steelblue">Hello World</text>
</svg>

<h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>path用于绘制更为复杂的内容（如地理图的国家轮廓等）。现在，我们先掌握简单的形状。</p>
<h2 id="Scale"><a href="#Scale" class="headerlink" title="Scale"></a>Scale</h2><p>D3的scale函数可以定义一个缩放比例。调用scale函数时，传入一个数据值，可以返回一个缩放后的输出值。</p>
<p>创建一个Scale:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scale = d3.scaleLinear();</span><br></pre></td></tr></table></figure>
<p>使用domain函数可以设置数据的输入域：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scale.domain([<span class="number">100</span>, <span class="number">500</span>]);</span><br></pre></td></tr></table></figure>
<p>使用range函数可以设置数据的输出域：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scale.range([<span class="number">10</span>, <span class="number">350</span>]);</span><br></pre></td></tr></table></figure>
<p>可以将上述步骤链接在一行代码中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> scale = d3.scaleLinear()</span><br><span class="line">	.domain([<span class="number">100</span>, <span class="number">500</span>])</span><br><span class="line">	.range([<span class="number">10</span>, <span class="number">350</span>]);</span><br><span class="line"></span><br><span class="line">scale(<span class="number">100</span>);	<span class="comment">//Returns 10</span></span><br><span class="line">scale(<span class="number">300</span>);	<span class="comment">//Returns 180</span></span><br><span class="line">scale(<span class="number">500</span>);	<span class="comment">//Returns 350</span></span><br></pre></td></tr></table></figure>
<h2 id="Axis"><a href="#Axis" class="headerlink" title="Axis"></a>Axis</h2><p>axis函数用来创建坐标轴。<br><code>d3.axisTop</code> - 创建一个上部轴生成器。<br><code>d3.axisRight</code> - 创建一个右部轴生成器。<br><code>d3.axisBottom</code> - 创建一个底部轴生成器。<br><code>d3.axisLeft</code> - 创建一个左部轴生成器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xAxis = d3.axisBottom();</span><br></pre></td></tr></table></figure>
<p>每个轴需告知操作的尺度规模大小,即scale：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xAxis.scale(xScale);</span><br></pre></td></tr></table></figure>
<p>可以使用ticks函数告诉坐标轴粗略的设置几个刻度：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xAxis.ticks(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>我们也可以把代码链接起来：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xAxis = d3.axisBottom()</span><br><span class="line">	.scale(xScale)</span><br><span class="line">	.ticks(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>最后，我们把生成的轴插入到SVG中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">svg.append(<span class="string">"g"</span>)</span><br><span class="line">	.call(xAxis);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>D3.js</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法总结</title>
    <url>/2020/02/28/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>直接插入排序、希尔排序、冒泡排序、快速排序、简单选择排序、堆排序、归并排序的实现。</p>
<a id="more"></a>
<h2 id="排序算法性能比较"><a href="#排序算法性能比较" class="headerlink" title="排序算法性能比较"></a>排序算法性能比较</h2><p><img src="https://s2.ax1x.com/2020/02/28/3DMK0g.jpg" alt="3DMK0g.jpg"></p>
<p>补充：</p>
<ul>
<li><strong>稳定排序算法</strong>：插入排序、冒泡排序、归并排序、基数排序</li>
<li><strong>不稳定排序算法</strong>：希尔排序、快速排序、选择排序、堆排序</li>
</ul>
<h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 直接插入排序</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, length = array.length; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = array[i];</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; array[j]; j--) &#123;</span><br><span class="line">      array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">    &#125;</span><br><span class="line">    array[j + <span class="number">1</span>] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 希尔排序</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length = array.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> d = length / <span class="number">2</span>; d &gt;= <span class="number">1</span>; d /= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = d; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> temp = array[i];</span><br><span class="line">      <span class="keyword">int</span> j;</span><br><span class="line">      <span class="keyword">for</span> (j = i - d; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; array[j]; j -= d) &#123;</span><br><span class="line">        array[j + d] = array[j];</span><br><span class="line">      &#125;</span><br><span class="line">      array[j + d] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 冒泡排序</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length = array.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">boolean</span> exchange = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[j];</span><br><span class="line">        array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">        array[j + <span class="number">1</span>] = temp;</span><br><span class="line">        exchange = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (exchange == <span class="keyword">false</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 快速排序一次划分算法</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = left, j = right, base = array[left];</span><br><span class="line">  <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; array[j] &gt; base) &#123;</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">      array[i] = array[j];</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] &lt; base) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">      array[j] = array[i];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  array[i] = base;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 快速排序</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = partition(array, left, right);</span><br><span class="line">    quickSort(array, left, pivot - <span class="number">1</span>);</span><br><span class="line">    quickSort(array, pivot + <span class="number">1</span>, right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 简单选择排序</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length = array.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> index = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j] &lt; array[index]) &#123;</span><br><span class="line">        index = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index != i) &#123;</span><br><span class="line">      <span class="keyword">int</span> temp = array[i];</span><br><span class="line">      array[i] = array[index];</span><br><span class="line">      array[index] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="推排序"><a href="#推排序" class="headerlink" title="推排序"></a>推排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 调整成大根堆</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> k     当前要筛选的节点</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> len   数组无序区长度</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapAdjust</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> k, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = k, j = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (j &lt; len) &#123;</span><br><span class="line">    <span class="keyword">if</span> (j &lt; len - <span class="number">1</span> &amp;&amp; array[j] &lt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &gt; array[j]) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> temp = array[i];</span><br><span class="line">      array[i] = array[j];</span><br><span class="line">      array[j] = temp;</span><br><span class="line">      i = j;</span><br><span class="line">      j = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 堆排序</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length = array.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = length / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    heapAdjust(array, i, length);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = array[i];</span><br><span class="line">    array[i] = array[<span class="number">0</span>];</span><br><span class="line">    array[<span class="number">0</span>] = temp;</span><br><span class="line">    heapAdjust(array, <span class="number">0</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 一次归并算法</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> mid</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = left, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &lt; array[j]) &#123;</span><br><span class="line">      temp[k++] = array[i++];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      temp[k++] = array[j++];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">    temp[k++] = array[i++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">    temp[k++] = array[j++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>, length = temp.length; p &lt; length; p++) &#123;</span><br><span class="line">    array[left + p] = temp[p];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 归并排序</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    mergeSort(array, left, mid);</span><br><span class="line">    mergeSort(array, mid + <span class="number">1</span>, right);</span><br><span class="line">    merge(array, left, mid, right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraySorts</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 直接插入排序</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, length = array.length; i &lt; length; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> temp = array[i];</span><br><span class="line">			<span class="keyword">int</span> j;</span><br><span class="line">			<span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; array[j]; j--) &#123;</span><br><span class="line">				array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">			&#125;</span><br><span class="line">			array[j + <span class="number">1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 希尔排序</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> length = array.length;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> d = length / <span class="number">2</span>; d &gt;= <span class="number">1</span>; d /= <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = d; i &lt; length; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> temp = array[i];</span><br><span class="line">				<span class="keyword">int</span> j;</span><br><span class="line">				<span class="keyword">for</span> (j = i - d; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; array[j]; j -= d) &#123;</span><br><span class="line">					array[j + d] = array[j];</span><br><span class="line">				&#125;</span><br><span class="line">				array[j + d] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 冒泡排序</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> length = array.length;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">			<span class="keyword">boolean</span> exchange = <span class="keyword">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">					<span class="keyword">int</span> temp = array[j];</span><br><span class="line">					array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">					array[j + <span class="number">1</span>] = temp;</span><br><span class="line">					exchange = <span class="keyword">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (exchange == <span class="keyword">false</span>) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 快速排序一次划分算法</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = left, j = right, base = array[left];</span><br><span class="line">		<span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">			<span class="keyword">while</span> (i &lt; j &amp;&amp; array[j] &gt; base) &#123;</span><br><span class="line">				j--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">				array[i] = array[j];</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] &lt; base) &#123;</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">				array[j] = array[i];</span><br><span class="line">				j--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		array[i] = base;</span><br><span class="line">		<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 快速排序</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">			<span class="keyword">int</span> pivot = partition(array, left, right);</span><br><span class="line">			quickSort(array, left, pivot - <span class="number">1</span>);</span><br><span class="line">			quickSort(array, pivot + <span class="number">1</span>, right);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 简单选择排序</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> length = array.length;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> index = i;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (array[j] &lt; array[index]) &#123;</span><br><span class="line">					index = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (index != i) &#123;</span><br><span class="line">				<span class="keyword">int</span> temp = array[i];</span><br><span class="line">				array[i] = array[index];</span><br><span class="line">				array[index] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 调整成大根堆</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> k     当前要筛选的节点</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> len   数组无序区长度</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapAdjust</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> k, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = k, j = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (j &lt; len) &#123;</span><br><span class="line">			<span class="keyword">if</span> (j &lt; len - <span class="number">1</span> &amp;&amp; array[j] &lt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (array[i] &gt; array[j]) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">int</span> temp = array[i];</span><br><span class="line">				array[i] = array[j];</span><br><span class="line">				array[j] = temp;</span><br><span class="line">				i = j;</span><br><span class="line">				j = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 堆排序</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> length = array.length;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = length / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			heapAdjust(array, i, length);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">int</span> temp = array[i];</span><br><span class="line">			array[i] = array[<span class="number">0</span>];</span><br><span class="line">			array[<span class="number">0</span>] = temp;</span><br><span class="line">			heapAdjust(array, <span class="number">0</span>, i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 一次归并算法</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> mid</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i = left, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">			<span class="keyword">if</span> (array[i] &lt; array[j]) &#123;</span><br><span class="line">				temp[k++] = array[i++];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				temp[k++] = array[j++];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">			temp[k++] = array[i++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">			temp[k++] = array[j++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>, length = temp.length; p &lt; length; p++) &#123;</span><br><span class="line">			array[left + p] = temp[p];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 归并排序</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">			<span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">			mergeSort(array, left, mid);</span><br><span class="line">			mergeSort(array, mid + <span class="number">1</span>, right);</span><br><span class="line">			merge(array, left, mid, right);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] array = &#123; <span class="number">12</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">31</span>, <span class="number">24</span>, <span class="number">15</span> &#125;;</span><br><span class="line">		<span class="comment">// ArraySorts.mergeSort(array, 0, array.length - 1);</span></span><br><span class="line">		ArraySorts.heapSort(array);</span><br><span class="line">		System.out.println(Arrays.toString(array));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络入门</title>
    <url>/2018/10/30/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>做了一个神经网络入门级的PPT，主要包括以下内容：</p>
<ol>
<li>概述</li>
<li>神经元模型</li>
<li>神经网络结构</li>
<li>代价函数</li>
<li>梯度下降算法</li>
<li>反向传播算法</li>
<li>使用神经网络识别手写数字</li>
<li>交叉熵代价函数</li>
<li>过度拟合和规范化</li>
</ol>
<a id="more"></a>
<embed src="神经网络入门PPT.pdf" width="100%" height="750" type="application/pdf">]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记-TagPies: Comparative Visualization of Textual Data</title>
    <url>/2020/02/25/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-TagPies-Comparative-Visualization-of-Textual-Data/</url>
    <content><![CDATA[<p>Jänicke S, Blumenstein J, Rücker M, et al. TagPies: Comparative Visualization of Textual Data[C]//VISIGRAPP (3: IVAPP). 2018: 40-51.</p>
<p>TagPie 是一种标签云布局，它以饼图的方式排列属于多个数据类别的标签。出于古典语言学研究的动机，TagPies 旨在支持古典术语的比较分析。在这种情况下，数据类别表示不同搜索关键字的共现词，因此使用 TagPies 可以比较使用这些关键字的上下文。</p>
<a id="more"></a>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>传统上，人文学者阅读纸质文献是为了产生和验证一些研究问题的假设。如今学者们可以访问包含大量文本的大型数字图书馆，通过查询数字图书馆来接收包含特定关键字的文本段落的能力可以加快假设的生成。但是通常情况下，大量的结果很难处理，因为文本段落需要逐个检查。</p>
<p>TagPie 能够呈现每个搜索关键词及其共现词，每个搜索关键词及其共现词作为一个数据类别，TagPie 能够呈现标签与各个数据类别的相关性和这些标签之间的关联关系，也能够分析标签出现的上下文或语境。</p>
<p>需求分析：</p>
<ol>
<li>支持单个关键词的上下文分析，和多个关键词上下文的比较。</li>
<li>传达标签与它共现关键词的相关性，以及它与所有关键词的相关性。</li>
<li>反映不同数据类别标签的比例。</li>
</ol>
<h2 id="TagPies-Layout"><a href="#TagPies-Layout" class="headerlink" title="TagPies Layout"></a>TagPies Layout</h2><p>首先介绍一些概念定义：</p>
<p>$T^1,…,T^n$ 是 n 个待搜索的关键词，使用这些关键词进行搜索、处理后得到 n 个数据分类（搜索结果） $d^1,…,d^n$，每个数据类别对应一个关键词的搜索结果，数据类别 $d^i$ 表示关键词 $T^i$ 的共现词。</p>
<p>对于每一个数据类别 $d^i$，都需要放置搜索关键词 $T^i$ 和 $T^i$ 的共现词的位置。$T^i$ 的共现词表示为：</p>
<script type="math/tex; mode=display">
t^i_1,...,t^i_{|d^i|} (d^i=\{t^i_k|1 \le k \le |d{^i}|\})</script><p>$F(T^i)$ 表示标签 $T^i$ 的共现词的数量，$F(t^i_k)$ 表示标签 $t^i_k$ 与标签 $T^i$ 共现的次数，标签 $t{^i_k}$ 与数据类别 $i$ 的相关性大小定义为：</p>
<script type="math/tex; mode=display">
R(t^i_k) = \frac {F(t^i_k)} {F(T^i)}</script><p>所有标签可以分为两类：共享标签和唯一标签。共享标签是在多个数据类别中都存在的标签，它在 TagPie 中有多个实例，也就是可以重复出现。某个共享标签 $t^i_s$ 的所有实例被定义为：</p>
<script type="math/tex; mode=display">
I(t^i_s) = \{t^i_s\} \cup \{t^j_s|1 \le j \le n, i \neq j, t^i_s=t^j_s\}</script><p>$|I(t^i_s)|$ 表示实例的数量。</p>
<p>唯一标签在 TagPie 中只出现一次，因此对于数据类别 $i$ 中的唯一标签 $t^i_u$， $I(t^i_u) = {t^i_u}$ 并且 $|I(t^i_u)| = 1$。</p>
<h3 id="Layout-Algorithm"><a href="#Layout-Algorithm" class="headerlink" title="Layout Algorithm"></a>Layout Algorithm</h3><p>布局的基本思想：将共享标签放在布局中心，将唯一标签放在布局外部区域。</p>
<p>首先，根据数据类别的相似性将所有数据类别进行排序。数据类别 $d^i$ 和 $d^j$ 的相似性 $s(d^i, d^j)$ 被定义为：</p>
<script type="math/tex; mode=display">
s(d^i, d^j) = \frac {|d^i \cap d^j|} {|d^i \cup d^j|}</script><p>然后采用如下排序方法：将最相似的两个数据类别放入一个双端队列中，然后迭代地确定与队列中的队头元素或队尾元素相似性最高的数据类别，插入队头或队尾。</p>
<p>标签字体大小由标签频率映射，为所有的标签添加边界框，估计在空间中放置每个数据类别的所有标签所需的空间大小。根据各数据类别的比例，确定了每个数据类别在圆中对应扇区所占的角度，数据类别 $d^1,…,d^n$ 对应的角度分别为 $\phi^1,…,\phi^n$，如图 Figure 1 所示。</p>
<p><a href="https://imgchr.com/i/3NXejs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/26/3NXejs.png" alt="3NXejs.png"></a></p>
<p><strong>主标签位置放置</strong><br>主标签（搜索关键词） $T^1,…,T^n$ 的位置，放置在圆内每个扇区的中心位置。首先，需要估算出圆的半径 $r$，可以计算一个没有包含标签扇区的 Wordle 词云，将该词云的半径作为 TagPie 的期望半径 $r$，然后将每个数据类别 $d^i$ 的主标签 $T^i$ 放在 TagPie 对应扇区的中心 $p(T^i) = (x^i, y^i)$，如 Figure 1 所示，由 $s$ 位置开始顺时针旋转，$p(T^i)$ 的坐标定义为：</p>
<script type="math/tex; mode=display">
x^i = \gamma \cdot r \cdot cos(\pi + \sum_{k=0}^{i-1}\phi^k + \frac{\phi^i}{2})</script><script type="math/tex; mode=display">
y^i = \gamma \cdot r \cdot sin(\pi + \sum_{k=0}^{i-1}\phi^k + \frac{\phi^i}{2})</script><p>设置 $\gamma=0.5$，将主标签放置在扇区的中心。当几个小扇区相邻时，相应的主标签可能会被遮挡。为了避免这些遮挡,在这种情况下可以减少或增加 $\gamma$。</p>
<p><strong>标签排序</strong><br>排序方法的思想是将与所有数据类别高度相关的标签（共享标签）放在 TagPie 的中心，将只与某一类别相关的标签（唯一标签）放置在TagPie 扇区的外部区域。要获得这种排序，需要先获得一个按如下排序规则的标签列表，对于标签列表 ${…,X,Y,…}$ 中任意两个相邻的标签 $X$ 和 $Y$，需要满足以下条件之一：</p>
<p>C1: $|I(X)| &gt; |I(Y)|$，表示共享标记移到列表开头，唯一标记移到列表末尾，标签实例数大的排在前面；</p>
<p>C2：$|I(X)| = |I(Y)|$, and $U(X) &lt; U(Y)$</p>
<script type="math/tex; mode=display">
U(X) = \frac{max(R(X_1))}{max(R(X_2))}, (X_1 \in I(X), X_2 \in I(X), X_2 \neq X_1).</script><p>$U(X)$ 表示标签 $X$ 的唯一性，由所有数据类别中标签 $X$ 出现频率最高的两个总数的商定义。标签 $X$ 与某一数据类别的相关性远比其它数据类别大，得到的 $U(X)$ 就越大。条件 C2 表示标签实例数量相同时，唯一性大标签的排在列表后面；</p>
<p>C3：$|I(X)| = |I(Y)|$, $U(X) = U(Y)$ and $ F(X) \ge F(Y)$，表示标签实例数量和唯一性相同时，出现次数更少的标签排在列表后面。</p>
<p>最后一步是根据 TagPie 中数据类别的比例对标记进行轻微的重新排序。由于标签数量较小的数据类别中唯一标签的出现次数通常低于标签数量较大的数据类别，因此根据上述条件进行排序后，将标签数量较小的数据类别中的唯一标签移到标签列表的后面。</p>
<p>在完成最后的标签排序之后，迭代地沿着阿基米德螺旋线定位标签位置，螺旋线是从标签云中心开始。如果螺旋线上确定的位置位于分配给相应数据类别的扇区中，并且标签没有遮挡其它标签，则放置标签；否则，标签被放置在离中心较远的后续螺旋线上。</p>
<h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><ol>
<li>不对标签进行旋转，以提高可读性。</li>
<li>给不同类别的标签分配不同的颜色。为了区别共享标签和唯一标签，给共享标签分配黑色，给唯一标签分配与数据类别相同的颜色。</li>
<li>给不同类别的标签添加不同的背景色，需要计算出背景形状的边界，步骤如下：根据所有标签边界框中心点的位置，计算 Delaunay triangulation(德劳内三角剖分)。(1) 三角形三个点对应的标签属于同一类别时不需要计算背景形状的边界，因为它们在相同的扇区内。(2) 当三角形有两个点对应的标签属于同一数据类别时，在标签边界框之间插入一条线段，见 Figure(a)。 (3) Delaunay triangulation 的最外沿，将所有标签边界框外边的顶点连接起来，见 Figure 2(b)。(3) 三角形的三个点对应的标签都属于不同的数据类别时，生成三条线段，每条线段都起源于三角形质心，见 Figure 2(c)。(4) 最后，用 Bezier Spline（贝兹曲线）绘制数据类别的边界。</li>
</ol>
<p><a href="https://imgchr.com/i/3NXJgJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/26/3NXJgJ.md.png" alt="3NXJgJ.md.png"></a></p>
<p><strong>可视化结果</strong><br><img src="https://s2.ax1x.com/2020/02/26/3NX0UK.png" alt="3NX0UK.png"></p>
]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>词云</tag>
        <tag>文本可视化</tag>
        <tag>论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 - RadCloud: Visualizing Multiple Texts with Merged Word Clouds</title>
    <url>/2020/02/23/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-RadCloud-Visualizing-Multiple-Texts-with-Merged-Word-Clouds/</url>
    <content><![CDATA[<p>Burch M, Lohmann S, Beck F, et al. RadCloud: Visualizing multiple texts with merged word clouds[C]//2014 18th International Conference on Information Visualisation. IEEE, 2014: 108-113.</p>
<p>RadCloud能够同时比较多个文本的内容，采用径向布局将所有词汇放在一个圆圈内，并能够呈现词汇与各个文本类别的相关性。</p>
<a id="more"></a>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>词云通常用于可视化文本中的重要词语，它们常常作为深入分析的起点，帮助判断文本的主要内容或是否与特定的信息需求相关。目前大多数词云针对单个文本进行可视化，很少能够同时可视化多个文本并比较它们的词汇和词汇频率。</p>
<p>这篇论文的目标是比较多个文本的内容，每个词汇只出现一次，而且词汇与每个文本类别的相关性也要在视觉上显示出来。</p>
<h2 id="RadCloud-Visualization"><a href="#RadCloud-Visualization" class="headerlink" title="RadCloud Visualization"></a>RadCloud Visualization</h2><h3 id="Design-Decisions"><a href="#Design-Decisions" class="headerlink" title="Design Decisions"></a>Design Decisions</h3><ol>
<li>词云采用径向布局将所有词汇放在一个圆圈内，圆弧的颜色对应文本类别。</li>
<li>每个词汇只出现一次，字体大小编码该词汇在所有类别中的最大相关性，颜色来源于最大相关性所在的类别。</li>
<li>词汇下方添加一个堆叠的柱状图，以表示它与每个类别的相关性。</li>
</ol>
<p><img src="https://s2.ax1x.com/2020/02/23/33Alh8.png" alt="33Alh8.png"></p>
<h3 id="Intended-Word-Positions"><a href="#Intended-Word-Positions" class="headerlink" title="Intended Word Positions"></a>Intended Word Positions</h3><p>使用一种新的 springs-based layout algorithm。</p>
<p>假设文本可以划分成一组类别：$C:=\lbrace c_1, …, c_n \rbrace$</p>
<p>所有词汇的集合可以表示为：$W:=\bigcup_{c \in C} W_c$</p>
<p>计算每个文本类别中词汇的权重，$weight(word_i, category_c)$如何计算讲得不是很清楚，我认为可以用tf或tf-idf表示：</p>
<script type="math/tex; mode=display">
w{^c_i} =
\begin{cases}
0,  & \text{if $w_i \notin W_c$} \\
weight(word_i, category_c) \in R, & \text{if $w_i \in W_c$}
\end{cases}</script><p>标准化权重：</p>
<script type="math/tex; mode=display">
w{^{'c}_i} := \frac {w{^c_i}} {\sum_{k=1}^{|W|}w{^c_k}}</script><p>词云设计成圆形形状，这个圆围绕着坐标系的原点，每个类别在圆的边上均匀分布。然后通过从圆的顶部开始绕圆心旋转点来获得各个类别的位置。从原点到类别点的向量表示为： $V_c := \overrightarrow{position(category_c)} $</p>
<p>词汇在各个类别所在方向上的权重：</p>
<script type="math/tex; mode=display">
w{^{''c}_i} := \frac {w{^{'c}_i}} {\sum_{k=1}^{|C|}w{^{'k}_i}}</script><p>词汇的位置：</p>
<script type="math/tex; mode=display">
position(word_i) := \sum_{c=1}^{|C|}(V_c \times w_i^{''c})</script><h3 id="Corrected-Word-Positions"><a href="#Corrected-Word-Positions" class="headerlink" title="Corrected Word Positions"></a>Corrected Word Positions</h3><p>此时的布局结果中，词汇可能会出现重叠。使用Springs建模词汇边界框间的距离，当两个词汇重叠时使其远离彼此少许。但是词汇相对于圆心的位置在语义上是相关的，因此坐标位置不能改变太大。</p>
<p><img src="https://s2.ax1x.com/2020/02/23/33FDaV.png" alt="33FDaV.png"></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><ol>
<li>这是一个可视化不同类别文档/文档集合的词云。每个词汇只在词云中出现一次，用户可以查看词汇与每个类别的相关性。</li>
<li>词汇位置是根据它与每个文本类别的相关性来决定的。为了避免词汇重叠，使用Springs布局纠正了词汇的位置，但尽量减少移动词汇。</li>
<li>词汇位置是一个指标，词汇位置越靠近某一类别，则与该类别的相关性越大；词汇下面的堆叠柱状图也用来可视化词汇与每一类文档的相关性，颜色表示不同的文本类别。</li>
</ol>
]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>词云</tag>
        <tag>文本可视化</tag>
        <tag>论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络-识别手写数字</title>
    <url>/2018/10/07/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<p>使用MNIST数据集训练神经网络模型。训练数据由28*28的手写数字的图像组成，输入层包含784=28*28个神经元。输入像素是灰度级的，值为0.0表示白色，值为1.0表示黑色，中间数值表示逐渐暗淡的灰色。</p>
<a id="more"></a>
<!-- <img src="/2018/10/07/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97/intro.png" class=""> -->
<p><img src="https://s2.ax1x.com/2020/02/20/3eo5ee.png" alt="3eo5ee.png"></p>
<h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><!-- <img src="/2018/10/07/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97/algorithm.png" class=""> -->
<p><img src="https://s2.ax1x.com/2020/02/20/3eoIdH.png" alt="3eoIdH.png"></p>
<h2 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a>Codes</h2><p>mnist_loader.py: 加载数据<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">()</span>:</span></span><br><span class="line">    f = gzip.open(<span class="string">'data/mnist.pkl.gz'</span>, <span class="string">'rb'</span>)</span><br><span class="line">    training_data, validation_data, test_data = pickle.load(f, encoding=<span class="string">"latin1"</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> (training_data, validation_data, test_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data_wrapper</span><span class="params">()</span>:</span></span><br><span class="line">    tr_d, va_d, te_d = load_data()</span><br><span class="line">    <span class="comment"># training_data[0]: x; 1*784</span></span><br><span class="line">    <span class="comment"># training_data[1]: y; 0-9</span></span><br><span class="line">    training_inputs = [np.reshape(x, (<span class="number">784</span>, <span class="number">1</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> tr_d[<span class="number">0</span>]]</span><br><span class="line">    training_results = [vectorized_result(y) <span class="keyword">for</span> y <span class="keyword">in</span> tr_d[<span class="number">1</span>]]</span><br><span class="line">    training_data = zip(training_inputs, training_results)</span><br><span class="line">    validation_inputs = [np.reshape(x, (<span class="number">784</span>, <span class="number">1</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> va_d[<span class="number">0</span>]]</span><br><span class="line">    validation_data = zip(validation_inputs, va_d[<span class="number">1</span>])</span><br><span class="line">    test_inputs = [np.reshape(x, (<span class="number">784</span>, <span class="number">1</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> te_d[<span class="number">0</span>]]</span><br><span class="line">    test_data = zip(test_inputs, te_d[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> (training_data, validation_data, test_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vectorized_result</span><span class="params">(j)</span>:</span></span><br><span class="line">    v = np.zeros((<span class="number">10</span>, <span class="number">1</span>))</span><br><span class="line">    v[j] = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">return</span> v</span><br></pre></td></tr></table></figure></p>
<p>network.py: 算法，包括小批量梯度下降、反向传播算法<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Network</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sizes)</span>:</span></span><br><span class="line">        <span class="string">"""初始化权重和偏置</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param sizes: 每一层神经元数量，类型为list</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        weights：权重</span></span><br><span class="line"><span class="string">        biases：偏置</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        self.sizes = sizes</span><br><span class="line">        self.num_layers = len(sizes)</span><br><span class="line">        self.weights = np.array([np.random.randn(x, y) <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(sizes[<span class="number">1</span>:], sizes[:<span class="number">-1</span>])])</span><br><span class="line">        self.biases = np.array([np.random.randn(y, <span class="number">1</span>) <span class="keyword">for</span> y <span class="keyword">in</span> sizes[<span class="number">1</span>:]])</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedforward</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        <span class="string">"""对一组样本x进行预测，然后输出"""</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> w, b <span class="keyword">in</span> zip(self.weights, self.biases):</span><br><span class="line">            a = sigmoid(np.dot(w, a) + b)</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gradient_descent</span><span class="params">(self, training_data, epochs, mini_batch_size, alpha, test_data=None)</span>:</span></span><br><span class="line">        <span class="string">"""MBGD，运行一个或者几个batch时更新一次</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param training_data: 训练数据，每一个样本包括(x, y)，类型为zip</span></span><br><span class="line"><span class="string">        :epochs: 迭代次数</span></span><br><span class="line"><span class="string">        :mini_batch_size：每一个小批量数据的数量</span></span><br><span class="line"><span class="string">        :alpha: 学习率</span></span><br><span class="line"><span class="string">        :test_data: 测试数据</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        training_data = list(training_data)</span><br><span class="line">        n = len(training_data)</span><br><span class="line">        <span class="keyword">if</span> test_data: </span><br><span class="line">            test_data = list(test_data)</span><br><span class="line">            n_test = len(list(test_data))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(epochs):</span><br><span class="line">            random.shuffle(training_data)</span><br><span class="line">            mini_batches = [training_data[k:k+mini_batch_size] <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, n, mini_batch_size)]</span><br><span class="line">            <span class="keyword">for</span> mini_batch <span class="keyword">in</span> mini_batches:</span><br><span class="line">                init_ws_derivative = np.array([np.zeros(w.shape) <span class="keyword">for</span> w <span class="keyword">in</span> self.weights])</span><br><span class="line">                init_bs_derivative = np.array([np.zeros(b.shape) <span class="keyword">for</span> b <span class="keyword">in</span> self.biases])</span><br><span class="line">                <span class="keyword">for</span> x, y <span class="keyword">in</span> mini_batch:</span><br><span class="line">                    activations, zs = self.forwardprop(x) <span class="comment">#前向传播</span></span><br><span class="line">                    delta = self.cost_deviation(activations[<span class="number">-1</span>], zs[<span class="number">-1</span>], y) <span class="comment">#计算最后一层误差</span></span><br><span class="line">                    ws_derivative, bs_derivative = self.backprop(activations, zs, delta) <span class="comment">#反向传播，cost func对w和b求偏导</span></span><br><span class="line">                    init_ws_derivative = init_ws_derivative + ws_derivative</span><br><span class="line">                    init_bs_derivative = init_bs_derivative + bs_derivative</span><br><span class="line">                self.weights = self.weights - alpha / len(mini_batch) * init_ws_derivative</span><br><span class="line">                self.biases = self.biases - alpha / len(mini_batch) * init_bs_derivative</span><br><span class="line">            <span class="keyword">if</span> test_data:</span><br><span class="line">                print(<span class="string">"Epoch &#123;&#125; : &#123;&#125; / &#123;&#125;"</span>.format(i, self.evaluate(test_data), n_test)) <span class="comment">#识别准确数量/测试数据集总数量</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"Epoch &#123;&#125; complete"</span>.format(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forwardprop</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""前向传播"""</span></span><br><span class="line">        </span><br><span class="line">        activation = x</span><br><span class="line">        activations = [x]</span><br><span class="line">        zs = []</span><br><span class="line">        <span class="keyword">for</span> w, b <span class="keyword">in</span> zip(self.weights, self.biases):</span><br><span class="line">            z = np.dot(w, activation) + b</span><br><span class="line">            zs.append(z)</span><br><span class="line">            activation = sigmoid(z)</span><br><span class="line">            activations.append(activation)</span><br><span class="line">        <span class="keyword">return</span> (activations, zs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cost_deviation</span><span class="params">(self, output, z, y)</span>:</span></span><br><span class="line">        <span class="string">"""计算最后一层误差"""</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (output - y) * sigmoid_derivative(z)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backprop</span><span class="params">(self, activations, zs, delta)</span>:</span></span><br><span class="line">        <span class="string">"""反向传播"""</span></span><br><span class="line">        </span><br><span class="line">        ws_derivative = np.array([np.zeros(w.shape) <span class="keyword">for</span> w <span class="keyword">in</span> self.weights])</span><br><span class="line">        bs_derivative = np.array([np.zeros(b.shape) <span class="keyword">for</span> b <span class="keyword">in</span> self.biases])</span><br><span class="line">        ws_derivative[<span class="number">-1</span>] = np.dot(delta, activations[<span class="number">-2</span>].transpose())</span><br><span class="line">        bs_derivative[<span class="number">-1</span>] = delta</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">2</span>, self.num_layers):</span><br><span class="line">            z = zs[-l]</span><br><span class="line">            delta = np.dot((self.weights[-l+<span class="number">1</span>]).transpose(), delta) * sigmoid_derivative(z)</span><br><span class="line">            ws_derivative[-l] = np.dot(delta, activations[-l<span class="number">-1</span>].transpose())</span><br><span class="line">            bs_derivative[-l] = delta</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (ws_derivative, bs_derivative)</span><br><span class="line">     </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self, test_data)</span>:</span></span><br><span class="line">        <span class="string">"""评估"""</span></span><br><span class="line">        </span><br><span class="line">        test_results = [(np.argmax(self.feedforward(x)), y) <span class="keyword">for</span> (x, y) <span class="keyword">in</span> test_data]</span><br><span class="line">        <span class="keyword">return</span> sum(int(output == y) <span class="keyword">for</span> (output, y) <span class="keyword">in</span> test_results)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-z))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_derivative</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="string">"""sigmoid函数偏导"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sigmoid(z) * (<span class="number">1</span> - sigmoid(z))</span><br></pre></td></tr></table></figure></p>
<p>run.py: 运行，训练一个三层（1个输入层、1个隐藏层、1个输出层）的神经网络模型<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mnist_loader</span><br><span class="line"><span class="keyword">import</span> network</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    training_data, validation_data, test_data = mnist_loader.load_data_wrapper()</span><br><span class="line">    net = network.Network([<span class="number">784</span>, <span class="number">30</span>, <span class="number">10</span>]) <span class="comment">#28*28</span></span><br><span class="line">    net.gradient_descent(training_data, <span class="number">30</span>, <span class="number">10</span>, <span class="number">3.0</span>, test_data=test_data)</span><br></pre></td></tr></table></figure></p>
<a href="/2018/10/07/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97/MNIST_handwritten.zip" title="MNIST数据集及源码下载">MNIST数据集及源码下载</a>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-原型模式</title>
    <url>/2020/02/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>用原型实例指定要创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<p>原型模式就是从一个对象再创建另一个可定制的对象，而不需要知道任何创建的细节。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3KN3X6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/22/3KN3X6.md.png" alt="3KN3X6.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Prototype <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String field;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcretePrototype</span><span class="params">(String field)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.field = field;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> field;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(String field)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.field = field;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Prototype <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ConcretePrototype(field);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"ConcretePrototype [field="</span> + field + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Prototype prototype = <span class="keyword">new</span> ConcretePrototype(<span class="string">"ConcretePrototype"</span>);</span><br><span class="line">		ConcretePrototype clonePrototype = (ConcretePrototype) prototype.clone();</span><br><span class="line">		clonePrototype.setField(<span class="string">"ClonePrototype"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以使用Java自带的clone方法，需要实现Cloneable接口，但这样一般实现的是浅拷贝，深拷贝可以通过对象流的读写完成，即序列化的方式。</p>
<p>以下是通过实现Cloneable接口来实现浅拷贝：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype2</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String field;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcretePrototype2</span><span class="params">(String field)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.field = field;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> field;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setField</span><span class="params">(String field)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.field = field;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"ConcretePrototype2 [field="</span> + field + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-中介者模式</title>
    <url>/2020/02/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间地交互。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3Mx5cT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/22/3Mx5cT.md.png" alt="3Mx5cT.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, Colleague colleague)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ConcreteColleague1 c1;</span><br><span class="line">	<span class="keyword">private</span> ConcreteColleague2 c2;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ConcreteColleague1 <span class="title">getC1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> c1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC1</span><span class="params">(ConcreteColleague1 c1)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.c1 = c1;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ConcreteColleague2 <span class="title">getC2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> c2;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setC2</span><span class="params">(ConcreteColleague2 c2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.c2 = c2;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, Colleague colleague)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (colleague == c1) &#123;</span><br><span class="line">			c2.receive(message);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c1.receive(message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague1</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(mediator);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		mediator.send(message, <span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-&gt; Colleague 1: "</span> + message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague2</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(mediator);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		mediator.send(message, <span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"-&gt; Colleague 2: "</span> + message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ConcreteMediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">		ConcreteColleague1 c1 = <span class="keyword">new</span> ConcreteColleague1(mediator);</span><br><span class="line">		ConcreteColleague2 c2 = <span class="keyword">new</span> ConcreteColleague2(mediator);</span><br><span class="line">		mediator.setC1(c1);</span><br><span class="line">		mediator.setC2(c2);</span><br><span class="line">		c1.send(<span class="string">"I'm ConcreteColleague1."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-命令模式</title>
    <url>/2020/02/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>将命令封装成对象，具有以下作用：</p>
<ul>
<li>使用不同的命令来参数化客户需求</li>
<li>将命令放入队列中进行排队</li>
<li>将命令的操作记录到日志中</li>
<li>支持可撤销的操作</li>
</ul>
<p>命令模式实现了行为请求者和行为实现者的解耦。</p>
<p>应用场景：</p>
<ul>
<li>餐厅：服务员（行为请求者）、厨师（行为实现者）</li>
<li>遥控器（行为请求者）、被遥控机器（行为实现者）</li>
<li>开关（行为请求者）、电灯（行为实现者）</li>
</ul>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><ul>
<li>Command：命令接口</li>
<li>ConcreteCommand：具体命令</li>
<li>Invoker：命令的请求者，发送命令</li>
<li>Receiver：命令的实现者，执行命令</li>
</ul>
<p><a href="https://imgchr.com/i/3M39Cq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/22/3M39Cq.md.png" alt="3M39Cq.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Command</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(receiver);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		receiver.action();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.command = command;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		command.execute();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">		Command command = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line">		Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">		invoker.setCommand(command);</span><br><span class="line">		invoker.executeCommand();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-工厂方法</title>
    <url>/2020/02/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到子类。</p>
<p>在简单工厂中，创建对象的是简单工厂类；而在工厂方法中，创建对象的是继承了父类工厂的子类。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3ugP0A" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/21/3ugP0A.md.png" alt="3ugP0A.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">factoryMethod</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Factory factory = <span class="keyword">new</span> ConcreteFactory1();</span><br><span class="line">		Product product = factory.factoryMethod();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-备忘录模式</title>
    <url>/2020/02/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在不破坏封装性的前提下，捕捉一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3Mzk4I" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/22/3Mzk4I.md.png" alt="3Mzk4I.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.state = state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建备忘录</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 恢复备忘录</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> memento</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">		state = memento.getState();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"State="</span> + state);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.state = state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> memento;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.memento = memento;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">		originator.setState(<span class="string">"on"</span>);</span><br><span class="line">		originator.show();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 保存状态</span></span><br><span class="line">		Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">		caretaker.setMemento(originator.createMemento());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 修改状态</span></span><br><span class="line">		originator.setState(<span class="string">"off"</span>);</span><br><span class="line">		originator.show();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 恢复初始状态</span></span><br><span class="line">		originator.setMemento(caretaker.getMemento());</span><br><span class="line">		originator.show();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-单例模式</title>
    <url>/2020/02/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>确保一个类只有一个实例，并提供一个访问它的全局访问点。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://s2.ax1x.com/2020/02/21/3uyanA.png" alt="3uyanA.png"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式-线程不安全"></a>懒汉式-线程不安全</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">			uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> uniqueInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="饿汉式-线程安全"><a href="#饿汉式-线程安全" class="headerlink" title="饿汉式-线程安全"></a>饿汉式-线程安全</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton2 uniqueInstance = <span class="keyword">new</span> Singleton2();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> uniqueInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双重校验锁-线程安全"><a href="#双重校验锁-线程安全" class="headerlink" title="双重校验锁-线程安全"></a>双重校验锁-线程安全</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton3 uniqueInstance;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">synchronized</span> (Singleton3<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">					uniqueInstance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> uniqueInstance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-抽象工厂</title>
    <url>/2020/02/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
<p>工厂方法只是用于创建一个对象，而抽象工厂创建的是对象家族，也就是很多对象，而且这些对象是相关的，必须一起创建出来。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://s2.ax1x.com/2020/02/21/3uWXHH.png" alt="3uWXHH.png"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretProductB2</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ConcretProductA1();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ConcretProductB1();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ConcretProductA2();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ConcretProductB2();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AbstractFactory factory = <span class="keyword">new</span> ConcreteFactory1();</span><br><span class="line">		AbstractProductA productA = factory.createProductA();</span><br><span class="line">		AbstractProductB productB = factory.createProductB();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-建造者模式</title>
    <url>/2020/02/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>将一个复杂对象的构建与它的表示分离，使得同样的构造过程可以创建不同的表示。</p>
<p>建造者模式是在当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用的模式。建造者模式的好处是使得构造复杂对象的建造代码和表示代码分离，隐藏了产品是如何组装的，若需要改变一个产品的内部表示，只需要再定义一个具体的建造者。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><ul>
<li>Product：要创建的产品角色，由多个部件组成。</li>
<li>Builder：为创建一个Product对象的各个部件指定的抽象接口。</li>
<li>ConcreteBuilder：具体的建造者，实现Builder接口，构造和装配各个部件。</li>
<li>Director：指挥者，它使用Builder接口，根据用户的需求构建Product对象。</li>
</ul>
<p><a href="https://imgchr.com/i/3uhwYn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/21/3uhwYn.md.png" alt="3uhwYn.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">getResult</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPartB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> product;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">		builder.buildPartA();</span><br><span class="line">		builder.buildPartB();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Director director = <span class="keyword">new</span> Director();</span><br><span class="line">		Builder builder = <span class="keyword">new</span> ConcretBuilder();</span><br><span class="line">		director.construct(builder);</span><br><span class="line">		Product product = builder.getResult();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-简单工厂</title>
    <url>/2020/02/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<p>在创建对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p>
<p>简单工厂把实例化操作单独放到一个类中，这个类就是简单工厂类，让简单工厂类来决定应该实例化哪个具体子类。这样做的好处是，能够把客户端和具体子类的实现解耦，客户端不再需要知道有哪些子类以及应当实例化哪个子类。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3u67IP" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/21/3u67IP.md.png" alt="3u67IP.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct3</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct3();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SimpleFactory simpleFactory = <span class="keyword">new</span> SimpleFactory();</span><br><span class="line">		Product product = simpleFactory.createProduct(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-模板方法</title>
    <url>/2020/02/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3JHQl6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/25/3JHQl6.md.png" alt="3JHQl6.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">primitiveOperation1</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">primitiveOperation2</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">primitiveOperation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"共有的方法3实现..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		primitiveOperation1();</span><br><span class="line">		primitiveOperation2();</span><br><span class="line">		primitiveOperation3();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassA</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">primitiveOperation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"具体类A方法1实现..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">primitiveOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"具体类A方法2实现..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassB</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">primitiveOperation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"具体类B方法1实现..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">primitiveOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"具体类B方法2实现..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AbstractClass c = <span class="keyword">new</span> ConcreteClassA();</span><br><span class="line">		c.templateMethod();</span><br><span class="line">		</span><br><span class="line">		c = <span class="keyword">new</span> ConcreteClassB();</span><br><span class="line">		c.templateMethod();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-策略模式</title>
    <url>/2020/02/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3JVQKS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/25/3JVQKS.md.png" alt="3JVQKS.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behavior</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行算法A..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"执行算法B..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		strategy.behavior();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Context context = <span class="keyword">new</span> Context();</span><br><span class="line">		context.setStrategy(<span class="keyword">new</span> ConcreteStrategyA());</span><br><span class="line">		context.doSomething();</span><br><span class="line"></span><br><span class="line">		context.setStrategy(<span class="keyword">new</span> ConcreteStrategyB());</span><br><span class="line">		context.doSomething();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-观察者模式</title>
    <url>/2020/02/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使他们能够自己更新自己。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3Mzs8x" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/22/3Mzs8x.md.png" alt="3Mzs8x.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 增加观察者</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">		observers.add(observer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除观察者</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">		observers.remove(observer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通知</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">			observer.update();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String subjectState;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSubjectState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> subjectState;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubjectState</span><span class="params">(String subjectState)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.subjectState = subjectState;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> ConcreteSubject concreteSubject;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteObserver</span><span class="params">(ConcreteSubject concreteSubject, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.concreteSubject = concreteSubject;</span><br><span class="line">		<span class="keyword">this</span>.concreteSubject.attach(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"观察者"</span> + name + <span class="string">"获取的主题状态是:"</span> + concreteSubject.getSubjectState());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ConcreteSubject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">		ConcreteObserver observer1 = <span class="keyword">new</span> ConcreteObserver(subject, <span class="string">"X"</span>);</span><br><span class="line">		ConcreteObserver observer2 = <span class="keyword">new</span> ConcreteObserver(subject, <span class="string">"Y"</span>);</span><br><span class="line">		ConcreteObserver observer3 = <span class="keyword">new</span> ConcreteObserver(subject, <span class="string">"Z"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更新状态并通知</span></span><br><span class="line">		subject.setSubjectState(<span class="string">"A"</span>);</span><br><span class="line">		subject.notifyObservers();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 删除一个观察者</span></span><br><span class="line">		subject.detach(observer2);</span><br><span class="line">		<span class="comment">// 更新状态并通知</span></span><br><span class="line">		subject.setSubjectState(<span class="string">"B"</span>);</span><br><span class="line">		subject.notifyObservers();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-访问者模式</title>
    <url>/2020/02/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素类的前提下定义作用于这些元素的新操作。</p>
<p>访问者模式适用于数据结构相对稳定的系统，它解耦了数据结构（元素类）和作用于结构上的操作（访问者类），使得操作集合可以相对自由地演化。访问者模式把处理从数据结构中分离出来，对于有稳定的数据结构，又有易于变化的算法的场景，使用访问者模式比较合适。</p>
<p>访问者模式的优点是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者，访问者模式将有关的行为集中到一个访问者对象中。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><ul>
<li>Visitor：抽象访问者，为每一个 ConcreteElement 声明一个 visit 操作，使得可以访问每一个 ConcreteElement 。</li>
<li>ConcreteVisitor：具体访问者，实现每个由 Visitor 声明的操作，每个操作实现算法的一部分，而该算法片段作用于 ObjectStructure 中的元素。</li>
<li>ObjectStructure：对象结构，可以是组合结构，或者是一个集合，能枚举它的元素，可以提供一个高层的接口允许访问者访问它的元素。</li>
<li>Element：被访问的元素。</li>
</ul>
<p><a href="https://imgchr.com/i/3YZj2t" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/25/3YZj2t.md.png" alt="3YZj2t.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA concreteElementA)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB concreteElementB)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitorA</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA concreteElementA)</span> </span>&#123;</span><br><span class="line">		System.out.println(</span><br><span class="line">				String.format(<span class="string">"%s被%s访问"</span>, concreteElementA.getClass().getSimpleName(), <span class="keyword">this</span>.getClass().getSimpleName()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB concreteElementB)</span> </span>&#123;</span><br><span class="line">		System.out.println(</span><br><span class="line">				String.format(<span class="string">"%s被%s访问"</span>, concreteElementB.getClass().getSimpleName(), <span class="keyword">this</span>.getClass().getSimpleName()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitorB</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA concreteElementA)</span> </span>&#123;</span><br><span class="line">		System.out.println(</span><br><span class="line">				String.format(<span class="string">"%s被%s访问"</span>, concreteElementA.getClass().getSimpleName(), <span class="keyword">this</span>.getClass().getSimpleName()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB concreteElementB)</span> </span>&#123;</span><br><span class="line">		System.out.println(</span><br><span class="line">				String.format(<span class="string">"%s被%s访问"</span>, concreteElementB.getClass().getSimpleName(), <span class="keyword">this</span>.getClass().getSimpleName()));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">		visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">		visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;Element&gt; elements = <span class="keyword">new</span> ArrayList&lt;Element&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">		elements.add(element);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">		elements.remove(element);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (Element e : elements) &#123;</span><br><span class="line">			e.accept(visitor);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ObjectStructure os = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line">		os.attach(<span class="keyword">new</span> ConcreteElementA());</span><br><span class="line">		os.attach(<span class="keyword">new</span> ConcreteElementB());</span><br><span class="line"></span><br><span class="line">		ConcreteVisitorA v1 = <span class="keyword">new</span> ConcreteVisitorA();</span><br><span class="line">		ConcreteVisitorB v2 = <span class="keyword">new</span> ConcreteVisitorB();</span><br><span class="line"></span><br><span class="line">		os.accept(v1);</span><br><span class="line">		os.accept(v2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-解释器模式</title>
    <url>/2020/02/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p>
<p>优点：</p>
<ul>
<li>将每个语法规则表示成一个类，方便实现语言。</li>
<li>因为语法由许多类表示，可以轻易改变或拓展此语言。</li>
<li>通过在类结构中加入新的方法，可以在解释的同时增加新的行为，例如复杂的程序验证等。</li>
</ul>
<p>缺点：</p>
<ul>
<li>当语法规则的数目太大时，这个模式可能会变得非常复杂。</li>
</ul>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><ul>
<li>Context：包含解释器之外的一些全局信息，可以是正在解析的语言字符串输入流</li>
<li>AbstractExpression：抽象表达式，声明一个抽象的解释操作</li>
<li>Client：客户端代码，构建表示该文法定义的语言中一个特定句子的抽象语法树</li>
</ul>
<p><a href="https://imgchr.com/i/3MIIXt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/22/3MIIXt.md.png" alt="3MIIXt.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String input;</span><br><span class="line">	<span class="keyword">private</span> String output;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> input;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInput</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.input = input;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOutput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> output;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOutput</span><span class="params">(String output)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.output = output;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">interprete</span><span class="params">(Context context)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interprete</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"终端解释器"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonTerminalExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interprete</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"非终端解释器"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Context context = <span class="keyword">new</span> Context();</span><br><span class="line">		List&lt;AbstractExpression&gt; list = <span class="keyword">new</span> ArrayList&lt;AbstractExpression&gt;();</span><br><span class="line">		list.add(<span class="keyword">new</span> TerminalExpression());</span><br><span class="line">		list.add(<span class="keyword">new</span> NonTerminalExpression());</span><br><span class="line">		list.add(<span class="keyword">new</span> TerminalExpression());</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(AbstractExpression exp: list) &#123;</span><br><span class="line">			exp.interprete(context);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例：实现A&amp;&amp;B，A和B只能是布尔型：true和false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String info)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (info.equals(<span class="string">"true"</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (info.equals(<span class="string">"false"</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不合法的表达式"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Expression exp1;</span><br><span class="line">	<span class="keyword">private</span> Expression exp2;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AndExpression</span><span class="params">(Expression exp1, Expression exp2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.exp1 = exp1;</span><br><span class="line">		<span class="keyword">this</span>.exp2 = exp2;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">interpret</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">		String[] strings = info.split(<span class="string">"&amp;&amp;"</span>);</span><br><span class="line">		<span class="keyword">return</span> exp1.interpret(strings[<span class="number">0</span>]) &amp;&amp; exp2.interpret(strings[<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Expression expression;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Expression exp1 = <span class="keyword">new</span> TerminalExpression();</span><br><span class="line">		Expression exp2 = <span class="keyword">new</span> TerminalExpression();</span><br><span class="line">		expression = <span class="keyword">new</span> AndExpression(exp1, exp2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getResult</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">boolean</span> res = expression.interpret(info);</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Context context = <span class="keyword">new</span> Context();</span><br><span class="line">		<span class="keyword">boolean</span> res = context.getResult(<span class="string">"true&amp;&amp;true"</span>);</span><br><span class="line">		System.out.println(res);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-状态模式</title>
    <url>/2020/02/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>允许对象在内部状态改变时改变它的行为，对象看起来好像改变了它的类。</p>
<p>将特定的状态相关的行为都放入一个对象中，由于所有与状态相关的代码都存在于具体状态类中，所以通过定义新的子类可以很容易地增加新的状态和转移。</p>
<p>使用状态模式可以消除庞大的条件分支语句。状态模式通过把各种状态转移逻辑分布到具体状态类中，来减少相互间的依赖。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3G39rq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/24/3G39rq.md.png" alt="3G39rq.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Context context)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		context.setState(<span class="keyword">new</span> ConcreteStateB());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		context.setState(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.state = state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.state = state;</span><br><span class="line">		System.out.println(<span class="string">"当前状态："</span> + state.getClass().getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		state.handle(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">		context.request();</span><br><span class="line">		context.request();</span><br><span class="line">		context.request();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例：糖果销售机有四种状态，每种状态下销售机有不同的行为，状态可以发生转移，使得销售机的行为也发生改变。</p>
<p><a href="https://imgchr.com/i/3G3pMn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/24/3G3pMn.md.png" alt="3G3pMn.md.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 投币</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 退币</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 转动曲柄</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发放糖果</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有币状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasQuarterState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HasQuarterState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"已经投币，不用再投了..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"将币退还给您..."</span>);</span><br><span class="line">		gumballMachine.setState(gumballMachine.getNoQuarterState());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"转动曲柄..."</span>);</span><br><span class="line">		gumballMachine.setState(gumballMachine.getSoldState());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"请先转动曲柄..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无币状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoQuarterState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">NoQuarterState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"投币成功..."</span>);</span><br><span class="line">		gumballMachine.setState(gumballMachine.getHasQuarterState());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"没有投币，无法退还..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"请先投币，再转动曲柄..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"没有糖果发放..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 糖果售罄状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoldOutState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SoldOutState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"糖果售罄了，不要再投币了..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"糖果售罄了，无法退还了..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"糖果售罄了，不要再转动曲柄了..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"糖果售罄了，无法再发放糖果了..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 售出糖果状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoldState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> GumballMachine gumballMachine;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SoldState</span><span class="params">(GumballMachine gumballMachine)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"已经投币，不用再投了..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"已经转动曲柄，无法退还..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"已经转动曲柄，不用再转动了..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispense</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		gumballMachine.releaseBall();</span><br><span class="line">		<span class="keyword">if</span> (gumballMachine.getNumberGumballs() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			gumballMachine.setState(gumballMachine.getNoQuarterState());</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			gumballMachine.setState(gumballMachine.getSoldOutState());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 糖果销售机</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GumballMachine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 无币状态</span></span><br><span class="line">	<span class="keyword">private</span> State noQuarterState;</span><br><span class="line">	<span class="comment">// 有币状态</span></span><br><span class="line">	<span class="keyword">private</span> State hasQuarterState;</span><br><span class="line">	<span class="comment">// 售出状态</span></span><br><span class="line">	<span class="keyword">private</span> State soldState;</span><br><span class="line">	<span class="comment">// 售罄状态</span></span><br><span class="line">	<span class="keyword">private</span> State soldOutState;</span><br><span class="line">	<span class="comment">// 假设初始状态是售罄状态</span></span><br><span class="line">	<span class="keyword">private</span> State state = soldOutState;</span><br><span class="line">	<span class="comment">// 糖果数量</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> numberGumballs;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">GumballMachine</span><span class="params">(<span class="keyword">int</span> numberGumballs)</span> </span>&#123;</span><br><span class="line">		noQuarterState = <span class="keyword">new</span> NoQuarterState(<span class="keyword">this</span>);</span><br><span class="line">		hasQuarterState = <span class="keyword">new</span> HasQuarterState(<span class="keyword">this</span>);</span><br><span class="line">		soldState = <span class="keyword">new</span> SoldState(<span class="keyword">this</span>);</span><br><span class="line">		soldOutState = <span class="keyword">new</span> SoldOutState(<span class="keyword">this</span>);</span><br><span class="line">		<span class="keyword">this</span>.numberGumballs = numberGumballs;</span><br><span class="line">		<span class="keyword">if</span> (numberGumballs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			state = noQuarterState;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 投币</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		state.insertQuarter();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 退币</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ejectQuarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		state.ejectQuarter();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 转动权柄</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnCrank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		state.turnCrank();</span><br><span class="line">		state.dispense();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 释放糖果</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseBall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"释放糖果..."</span>);</span><br><span class="line">		<span class="keyword">if</span> (numberGumballs != <span class="number">0</span>) &#123;</span><br><span class="line">			numberGumballs -= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.state = state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> State <span class="title">getNoQuarterState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> noQuarterState;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> State <span class="title">getHasQuarterState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> hasQuarterState;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> State <span class="title">getSoldState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> soldState;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> State <span class="title">getSoldOutState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> soldOutState;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumberGumballs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> numberGumballs;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumberGumballs</span><span class="params">(<span class="keyword">int</span> numberGumballs)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.numberGumballs = numberGumballs;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		GumballMachine gumballMachine = <span class="keyword">new</span> GumballMachine(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">		gumballMachine.insertQuarter();</span><br><span class="line">		gumballMachine.turnCrank();</span><br><span class="line">		System.out.println(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">		gumballMachine.insertQuarter();</span><br><span class="line">		gumballMachine.ejectQuarter();</span><br><span class="line">		gumballMachine.turnCrank();</span><br><span class="line">		System.out.println(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">		gumballMachine.insertQuarter();</span><br><span class="line">		gumballMachine.turnCrank();</span><br><span class="line">		gumballMachine.insertQuarter();</span><br><span class="line">		gumballMachine.turnCrank();</span><br><span class="line">		gumballMachine.ejectQuarter();</span><br><span class="line">		System.out.println(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">		gumballMachine.insertQuarter();</span><br><span class="line">		gumballMachine.insertQuarter();</span><br><span class="line">		gumballMachine.turnCrank();</span><br><span class="line">		gumballMachine.insertQuarter();</span><br><span class="line">		gumballMachine.turnCrank();</span><br><span class="line">		gumballMachine.insertQuarter();</span><br><span class="line">		gumballMachine.turnCrank();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">投币成功...</span><br><span class="line">转动曲柄...</span><br><span class="line">释放糖果...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">投币成功...</span><br><span class="line">将币退还给您...</span><br><span class="line">请先投币，再转动曲柄...</span><br><span class="line">没有糖果发放...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">投币成功...</span><br><span class="line">转动曲柄...</span><br><span class="line">释放糖果...</span><br><span class="line">投币成功...</span><br><span class="line">转动曲柄...</span><br><span class="line">释放糖果...</span><br><span class="line">没有投币，无法退还...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">投币成功...</span><br><span class="line">已经投币，不用再投了...</span><br><span class="line">转动曲柄...</span><br><span class="line">释放糖果...</span><br><span class="line">投币成功...</span><br><span class="line">转动曲柄...</span><br><span class="line">释放糖果...</span><br><span class="line">糖果售罄了，不要再投币了...</span><br><span class="line">糖果售罄了，不要再转动曲柄了...</span><br><span class="line">糖果售罄了，无法再发放糖果了...</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-责任链模式</title>
    <url>/2020/02/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。</p>
<p>责任链模式的好处是：接收者和发送者都没有对方的明确信息，且链中的对象自己也不知道链的结构。结果是它们仅需保持一个指向其后继者的引用，而不需保持它所有的候选接收者的引用。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3KUXdS" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/22/3KUXdS.md.png" alt="3KUXdS.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(<span class="keyword">int</span> type, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.type = type;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> type;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> Handler successor;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.successor = successor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteHandler1</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(successor);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (request.getType() == <span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println(request.getName() + <span class="string">" is handled by ConcreteHandler1"</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">			successor.handleRequest(request);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteHandler2</span><span class="params">(Handler successor)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(successor);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (request.getType() == <span class="number">2</span>) &#123;</span><br><span class="line">			System.out.println(request.getName() + <span class="string">" is handled by ConcreteHandler2"</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">			successor.handleRequest(request);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Handler superiorHandler = <span class="keyword">new</span> ConcreteHandler1(<span class="keyword">null</span>);</span><br><span class="line">		Handler juniorHandler = <span class="keyword">new</span> ConcreteHandler2(superiorHandler);</span><br><span class="line">		Request request1 = <span class="keyword">new</span> Request(<span class="number">1</span>, <span class="string">"request1"</span>);</span><br><span class="line">		juniorHandler.handleRequest(request1);</span><br><span class="line">		</span><br><span class="line">		Request request2 = <span class="keyword">new</span> Request(<span class="number">2</span>, <span class="string">"request2"</span>);</span><br><span class="line">		juniorHandler.handleRequest(request2);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-迭代器模式</title>
    <url>/2020/02/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</p>
<a id="more"></a>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><a href="https://imgchr.com/i/3MHjaV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/22/3MHjaV.md.png" alt="3MHjaV.md.png"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title">Aggregate</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> List&lt;Object&gt; items = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object item)</span> </span>&#123;</span><br><span class="line">		items.add(item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.get(index);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items.size();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Iterator&lt;Object&gt; <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ConcreteAggregate aggregate;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span><span class="params">(ConcreteAggregate aggregate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.aggregate = aggregate;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (index &gt;= aggregate.size()) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> aggregate.get(index++);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ConcreteAggregate aggregate = <span class="keyword">new</span> ConcreteAggregate();</span><br><span class="line">		aggregate.add(<span class="number">1</span>);</span><br><span class="line">		aggregate.add(<span class="number">2</span>);</span><br><span class="line">		aggregate.add(<span class="number">3</span>);</span><br><span class="line">		Iterator&lt;Object&gt; iterator = aggregate.createIterator();</span><br><span class="line">		<span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">			System.out.println(iterator.next());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>D设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>噪点废片拯救：ComfyUI Upscale 给萤火虫照片做像素整容</title>
    <url>/2025/08/17/%E5%99%AA%E7%82%B9%E5%BA%9F%E7%89%87%E6%8B%AF%E6%95%91%EF%BC%9AComfyUI%20Upscale%20%E7%BB%99%E8%90%A4%E7%81%AB%E8%99%AB%E7%85%A7%E7%89%87%E5%81%9A%E5%83%8F%E7%B4%A0%E6%95%B4%E5%AE%B9/</url>
    <content><![CDATA[<p>“哥！你看这拍的萤火虫照片还有救吗？” 晚上12点多，手机屏幕突然亮起老妹的消息。</p>
<p>晚上她跑到山上去拍萤火虫，在山上蹲了几个小时喂蚊子。回来导片一看，高感噪点像撒了把沙子在画面上，暗部全是彩色噪点，图片放大全是颗粒。</p>
<p>我点开原图，6000×4000 像素的照片在屏幕上炸开：<br><img src="/2025/08/17/%E5%99%AA%E7%82%B9%E5%BA%9F%E7%89%87%E6%8B%AF%E6%95%91%EF%BC%9AComfyUI%20Upscale%20%E7%BB%99%E8%90%A4%E7%81%AB%E8%99%AB%E7%85%A7%E7%89%87%E5%81%9A%E5%83%8F%E7%B4%A0%E6%95%B4%E5%AE%B9/%E5%8E%9F%E5%9B%BE.jpg" class=""></p>
<p>“试试手机LR？” 我回了条消息。半小时后收到她的回复：”降噪拉到最大还是糊！市面上一些修图APP去噪要开会员呢。”</p>
<p>想起之前捣鼓玩耍过一段时间的ComfyUI。或许，使用这玩意跑模型能救这照片呢？”我白天试试。”</p>
<a id="more"></a>
<h2 id="Upscale"><a href="#Upscale" class="headerlink" title="Upscale"></a>Upscale</h2><p>Upscale 可以将一些分辨率很低的照片，通过技术手段修复并放大，转化成高清照片。我们的目标是将一张 6000*4000 像素的照片去噪修复，不需要额外放大，可以尝试使用 Upscale 模型和 ComfyUI_UltimateSDUpscale 来试试效果。</p>
<h3 id="Upscale-Image-using-Model"><a href="#Upscale-Image-using-Model" class="headerlink" title="Upscale Image using Model"></a>Upscale Image using Model</h3><p>先缩小再放大的魔法：通过 Upscale Model 修复图片，必然会放大图片，然而我们只需要修复图片，不需要额外放大图片，因此可以将图片缩小 1/8，然后再使用模型修复放大8倍还原图片大小，同时优化图片质量。</p>
<p>工作流如下：</p>
<ol>
<li>加载6000*4000摄影图片;</li>
<li>Upscale Image 将图片缩小为原来的 1/8;</li>
<li>Load upscale Model 节点加载模型，第一个模型放大4倍，第二个模型放大2倍; Upscale Image (using Model) 节点输出放大的图片。</li>
</ol>
<img src="/2025/08/17/%E5%99%AA%E7%82%B9%E5%BA%9F%E7%89%87%E6%8B%AF%E6%95%91%EF%BC%9AComfyUI%20Upscale%20%E7%BB%99%E8%90%A4%E7%81%AB%E8%99%AB%E7%85%A7%E7%89%87%E5%81%9A%E5%83%8F%E7%B4%A0%E6%95%B4%E5%AE%B9/%E6%A8%A1%E5%9E%8Bscale%E5%B7%A5%E4%BD%9C%E6%B5%81.png" class="">
<p>1分钟左右出结果，实验效果见效果对比部分，去噪效果还不错。</p>
<p>这里我使用的 Upscale 模型是如下，下载后将其放到 ComfyUI 里的 models/upscale_models 文件夹内。</p>
<ol>
<li><a href="https://openmodeldb.info/models/2x-realesrgan-x2plus" target="_blank" rel="noopener">RealESRGAN_x2Plus</a></li>
<li><a href="https://openmodeldb.info/models/4x-realesrgan-x4plus" target="_blank" rel="noopener">RealESRGAN_x4Plus</a></li>
</ol>
<h3 id="Ultimate-SD-Upscale"><a href="#Ultimate-SD-Upscale" class="headerlink" title="Ultimate SD Upscale"></a>Ultimate SD Upscale</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>使用SD放大需要安装 <a href="https://github.com/ssitu/ComfyUI_UltimateSDUpscale?tab=readme-ov-file" target="_blank" rel="noopener">ComfyUI_UltimateSDUpscale</a> 插件，该插件有三种节点：</p>
<p>1、Ultimate SD Upscale（标准节点）</p>
<ul>
<li>功能<ul>
<li>预放大：使用指定的 Upscale Model 对输入图像进行初始放大（默认按模型倍数，或通过 upscale_by 覆盖）。</li>
<li>分块细化：将放大后的图像切分为多个 tile，逐个 tile 进行重绘处理，再智能拼接，实现高质量、无缝的图像放大。</li>
</ul>
</li>
<li>用途：需要高倍数放大且保留高质量细节的情况。</li>
</ul>
<p>2、Ultimate SD Upscale (No Upscale)</p>
<ul>
<li>功能<ul>
<li>跳过预放大，直接对原始分辨率图像进行分块细化。</li>
<li>仅执行分块重绘，不改变图像尺寸。</li>
</ul>
</li>
<li>用途：图像无需放大，只需局部修复细节。</li>
</ul>
<p>3、Ultimate SD Upscale (Custom Sample)</p>
<ul>
<li>功能<ul>
<li>自定义采样器：允许接入外部采样器（如 KSampler），替代默认的 SD 重绘流程。</li>
<li>灵活性更高：可自由控制采样步数、CFG Scale、种子等参数。</li>
</ul>
</li>
<li>用途：需要精细控制重绘过程（如特定采样器、步数）。</li>
</ul>
<h4 id="第一次-SD-尝试碰壁"><a href="#第一次-SD-尝试碰壁" class="headerlink" title="第一次 SD 尝试碰壁"></a>第一次 SD 尝试碰壁</h4><p>Ultimate SD Upscale (No Upscale) 节点不就刚好满足我的要求嘛，直接修复图片，不需要放大。将工作流调整如下，点击运行，坐等结果。</p>
<img src="/2025/08/17/%E5%99%AA%E7%82%B9%E5%BA%9F%E7%89%87%E6%8B%AF%E6%95%91%EF%BC%9AComfyUI%20Upscale%20%E7%BB%99%E8%90%A4%E7%81%AB%E8%99%AB%E7%85%A7%E7%89%87%E5%81%9A%E5%83%8F%E7%B4%A0%E6%95%B4%E5%AE%B9/sd%E4%BF%AE%E5%A4%8D%E4%B8%8D%E6%94%BE%E5%A4%A7%E5%B7%A5%E4%BD%9C%E6%B5%81.png" class="">
<p>我电脑 MAC M1芯片16GB内存，40多分钟过去了，图片还没有跑出来，我放弃了。图片像素太大，SD 根本跑不动。</p>
<h4 id="第二次-SD-尝试"><a href="#第二次-SD-尝试" class="headerlink" title="第二次 SD 尝试"></a>第二次 SD 尝试</h4><p>考虑到耗时时间长短，仍然将图片缩小为原来的 1/8，再使用 Ultimate SD Upscale 和 Upscale Model 联合放大修复。</p>
<p>工作流如下：</p>
<ol>
<li>加载6000*4000摄影图片;</li>
<li>Upscale Image 将图片缩小为原来的 1/8;</li>
<li>Ultimate SD Upscale 放大4倍，Upscale Model 放大2倍，然后输出图片。</li>
</ol>
<img src="/2025/08/17/%E5%99%AA%E7%82%B9%E5%BA%9F%E7%89%87%E6%8B%AF%E6%95%91%EF%BC%9AComfyUI%20Upscale%20%E7%BB%99%E8%90%A4%E7%81%AB%E8%99%AB%E7%85%A7%E7%89%87%E5%81%9A%E5%83%8F%E7%B4%A0%E6%95%B4%E5%AE%B9/sd%E6%94%BE%E5%A4%A7%E5%B7%A5%E4%BD%9C%E6%B5%81.png" class="">
<p>20多分钟终于出结果了，看效果图还不错，噪点消除的比较彻底，细节也保留的不错。</p>
<p>在 ComfyUI 中，Upscale Models 和 Ultimate SD Upscale 的放大倍数由不同的参数控制，都可以放大图片：</p>
<ol>
<li>Load Upscale Model 节点放大倍数由模型本身决定。下载模型的时候会看到模型标题里写 X2 或 X4，它们的意思是放大的倍数，X2 就是放大两倍，以此类推；</li>
<li>Ultimate SD Upscale 节点即使连接 Load Upscale Model 节点，但最终放大倍数仍由 upscale_by 参数决定。 </li>
</ol>
<h3 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h3><p>修复效果对比图如下，图1为原图，图2为三流PS选手去噪结果，图3为 Upscale Model x4x2 结果，图4为 SD x4 + Upscale Model x2 结果。</p>
<div style="display: flex; gap: 10px; margin-bottom: 20px;">
  <img src="原图.jpg" alt="原图" style="width: 50%; height: auto;">
  <img src="原图-ps降噪.jpg" alt="原图-ps降噪" style="width: 50%; height: auto;">
</div>
<div style="display: flex; gap: 10px; margin-bottom: 20px;">
  <img src="原图-模型x2x4.jpg" alt="原图-模型x2x4" style="width: 50%; height: auto;">
  <img src="原图-sdx4模型x2.jpg" alt="原图-sdx4模型x2" style="width: 50%; height: auto;">
</div>

<p>放大图片右上角 1024*1024 的空间，可以看到原图和PS降噪的图片噪点非常多，使用 Upscale Model 和 SD 修复后降噪效果都不错，个人认为 SD 修复效果更好一点，但是考虑到耗时问题，此场景中 Upscale Model 修复性价比更高。</p>
<img src="/2025/08/17/%E5%99%AA%E7%82%B9%E5%BA%9F%E7%89%87%E6%8B%AF%E6%95%91%EF%BC%9AComfyUI%20Upscale%20%E7%BB%99%E8%90%A4%E7%81%AB%E8%99%AB%E7%85%A7%E7%89%87%E5%81%9A%E5%83%8F%E7%B4%A0%E6%95%B4%E5%AE%B9/%E6%94%BE%E5%A4%A7%E6%95%88%E6%9E%9C%E5%AF%B9%E6%AF%94%E5%9B%BE.png" class="">
<h2 id="图片分享"><a href="#图片分享" class="headerlink" title="图片分享"></a>图片分享</h2><p>最后来一组老妹拍的照片分享，下图均是 Scale Model 修复结果。</p>
<img src="/2025/08/17/%E5%99%AA%E7%82%B9%E5%BA%9F%E7%89%87%E6%8B%AF%E6%95%91%EF%BC%9AComfyUI%20Upscale%20%E7%BB%99%E8%90%A4%E7%81%AB%E8%99%AB%E7%85%A7%E7%89%87%E5%81%9A%E5%83%8F%E7%B4%A0%E6%95%B4%E5%AE%B9/%E5%8E%9F%E5%9B%BE2-x4x2.jpg" class="">
<p><br></p>
<img src="/2025/08/17/%E5%99%AA%E7%82%B9%E5%BA%9F%E7%89%87%E6%8B%AF%E6%95%91%EF%BC%9AComfyUI%20Upscale%20%E7%BB%99%E8%90%A4%E7%81%AB%E8%99%AB%E7%85%A7%E7%89%87%E5%81%9A%E5%83%8F%E7%B4%A0%E6%95%B4%E5%AE%B9/%E5%8E%9F%E5%9B%BE3-x4x2.jpg" class="">
<p><br></p>
<img src="/2025/08/17/%E5%99%AA%E7%82%B9%E5%BA%9F%E7%89%87%E6%8B%AF%E6%95%91%EF%BC%9AComfyUI%20Upscale%20%E7%BB%99%E8%90%A4%E7%81%AB%E8%99%AB%E7%85%A7%E7%89%87%E5%81%9A%E5%83%8F%E7%B4%A0%E6%95%B4%E5%AE%B9/%E5%8E%9F%E5%9B%BE4-x4x2.jpg" class="">
]]></content>
      <tags>
        <tag>ComfyUI</tag>
      </tags>
  </entry>
</search>
